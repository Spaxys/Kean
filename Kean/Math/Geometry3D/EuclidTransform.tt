<#@ template language="C#" hostspecific="True" #>
<#
	GenerateStart("Single", "float");
	SaveOutput("Single/EuclidTransform.cs");
	
	GenerateStart("Double", "double");
	SaveOutput("Double/EuclidTransform.cs");
#>
<#+
void SaveOutput(string outputFileName)
{
	string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
	string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
	System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
	this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>
<#+
	void GenerateStart(string @namespace, string @type)
	{
#>
using System;
using Geometry3D = Kean.Math.Geometry3D;
using Kean.Extension;

namespace Kean.Math.Geometry3D.<#= @namespace #>
{
    public struct EuclidTransform :
        IEquatable<EuclidTransform>
    {
        public Geometry3D.<#= @namespace #>.Rotation Rotation { get; private set; }
        public Geometry3D.<#= @namespace #>.Size Translation { get; private set; }

        public EuclidTransform Inverse { get { return new EuclidTransform(this.Rotation.Inverse, -1*this.Translation); } }

        public EuclidTransform(Geometry3D.<#= @namespace #>.Rotation rotation) :
            this(rotation, new Geometry3D.<#= @namespace #>.Size(0, 0, 0))
        { }
        public EuclidTransform(Geometry3D.<#= @namespace #>.Size translation) :
            this(new Geometry3D.<#= @namespace #>.Rotation(0,0,0), translation)
        { }
        public EuclidTransform(Geometry3D.<#= @namespace #>.Rotation rotation, Geometry3D.<#= @namespace #>.Size translation) : 
            this()
        {
            this.Rotation = rotation;
            this.Translation = translation;
        }
        public EuclidTransform(<#= @type #> x, <#= @type #> y, <#= @type #> z, <#= @type #> rx, <#= @type #> ry, <#= @type #> rz) :
            this()
        {
            this.Rotation = new Geometry3D.<#= @namespace #>.Rotation(rx, ry, rz);
            this.Translation = new Geometry3D.<#= @namespace #>.Size(x, y, z);
        }
        public EuclidTransform Rotate(Rotation rotation)
        {
            return new EuclidTransform(rotation) * this;
        }
        public EuclidTransform Translate(Geometry3D.<#= @namespace #>.Size translation)
        {
            return new EuclidTransform(translation) * this;
        }
        #region Object overrides
        public override bool Equals(object other)
        {
            return (other is EuclidTransform) ? this.Equals(other) : false;
        }
        public override int GetHashCode()
        {
            return (33 * this.Rotation.GetHashCode() ^ this.Translation.GetHashCode());
        }
        public override string ToString()
        {
            return this.Translation.ToString() +"; " + this.Rotation.ToString();
        }
        #endregion
        #region IEquatable<Rotation> Members
        public bool Equals(EuclidTransform other)
        {
            return other.NotNull() && this.Rotation == other.Rotation && this.Translation.Equals(other.Translation);
        }
        #endregion
        #region Binary Operators
        public static EuclidTransform operator +(EuclidTransform left, EuclidTransform right)
        {
            return new EuclidTransform(left.Rotation + right.Rotation, left.Translation + right.Translation);
        }
        public static EuclidTransform operator /(EuclidTransform left, <#= @type #> right)
        {
            return new EuclidTransform(left.Rotation / right, left.Translation / right);
        }
        public static Geometry3D.<#= @namespace #>.Point operator *(EuclidTransform left, Geometry3D.<#= @namespace #>.Point right)
        {
            return (left.NotNull() && right.NotNull()) ? left.Translation + (left.Rotation * right) : null;
        }
        public static EuclidTransform operator *(EuclidTransform left, EuclidTransform right)
        {
            return new EuclidTransform(left.Rotation * right.Rotation, left.Translation + right.Translation);
        }
        public static bool operator ==(EuclidTransform left, EuclidTransform right)
        {
            return left.NotNull() ? left.Equals(right) : right.IsNull();
        }
        public static bool operator !=(EuclidTransform left, EuclidTransform right)
        {
            return !(left == right);
        }
        #endregion
        #region Casts
        public static implicit operator Geometry3D.<#= @namespace #>.Transform(EuclidTransform value)
        {
            return  Geometry3D.<#= @namespace #>.Transform.CreateRotationX(value.Rotation.RotationX).RotateY(value.Rotation.RotationY).RotateZ(value.Rotation.RotationZ).Translate(value.Translation);
        }
        public static implicit operator string(EuclidTransform value)
        {
            return value.NotNull() ? value.ToString() : null;
        }
        #endregion
        #region Static
        public static EuclidTransform Identity { get { return new EuclidTransform(); } }
        #endregion

    }
}

<#+
	}
#>
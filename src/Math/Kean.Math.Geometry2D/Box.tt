<#@ template language="C#v3.5" hostspecific="True" #>
<#
    GenerateStart("BoxValue", "Kean.Math.Geometry2D", "Single",  "float");
	GenerateSingle("BoxValue");
    GenerateEnd("BoxValue", "Kean.Math.Geometry2D", "Single",  "float");
  	SaveOutput("Single/BoxValue.cs");  
    
    GenerateStart("BoxValue", "Kean.Math.Geometry2D", "Double",  "double");
    GenerateDouble("BoxValue");
    GenerateEnd("BoxValue", "Kean.Math.Geometry2D", "Double",  "double");
    SaveOutput("Double/BoxValue.cs");   

    GenerateStart("BoxValue", "Kean.Math.Geometry2D", "Integer",  "int");
    GenerateEnd("BoxValue", "Kean.Math.Geometry2D", "Integer",  "int");
    SaveOutput("Integer/BoxValue.cs");    
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
      System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
    void GenerateStart(string @name, string @namespace, string @namespace1, string @value1)
    {
#>
// 
//  <#= @name #>.cs (generated by template)
//  
//  Author:
//       Simon Mika <smika@hx.se>
//  
//  Copyright (c) 2011 Simon Mika
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
using System;
using Kean.Core.Extension;

namespace <#= @namespace #>.<#= @namespace1 #>
{
    public struct <#= @name #> :
        Abstract.IBox<PointValue, SizeValue, <#= @value1 #>>,
		IEquatable<<#= @name #>>
    {
        public PointValue LeftTop;
        public SizeValue Size;
        #region IBox<PointValue,SizeValue,<#= @value1 #>> Members
        PointValue <#= @namespace #>.Abstract.IBox<PointValue, SizeValue, <#= @value1 #>>.LeftTop {get { return this.LeftTop; }}
        SizeValue <#= @namespace #>.Abstract.IBox<PointValue, SizeValue, <#= @value1 #>>.Size { get { return this.Size; } }
        #endregion
		#region Sizes
		public <#= @value1 #> Width { get { return this.Size.Width; } }
        public <#= @value1 #> Height { get { return this.Size.Height; } }
		#endregion
		#region All sides
		public <#= @value1 #> Left { get { return this.LeftTop.X; } }
        public <#= @value1 #> Top { get { return this.LeftTop.Y; } }
        public <#= @value1 #> Right { get { return this.LeftTop.X + this.Size.Width; } }
        public <#= @value1 #> Bottom { get { return this.LeftTop.Y + this.Size.Height; } }
		#endregion
		#region All other corners
		public PointValue RightTop { get { return new PointValue(this.Right, this.Top); } }
		public PointValue LeftBottom { get { return new PointValue(this.Left, this.Bottom); } }
		public PointValue RightBottom { get { return this.LeftTop + (Abstract.IVector<<#= @value1 #>>)this.Size; } }
		#endregion
		public PointValue Center { get { return this.LeftTop + (Abstract.IVector<<#= @value1 #>>)(this.Size / 2); } }
		public bool Empty { get { return this.Size.Empty; } }

		public <#= @name #>(<#= @value1 #> left, <#= @value1 #> top, <#= @value1 #> width, <#= @value1 #> height)
        {
            this.LeftTop = new PointValue(left, top);
            this.Size = new SizeValue(width, height);
        }
        public <#= @name #>(PointValue leftTop, SizeValue size)
        {
            this.LeftTop = leftTop;
            this.Size = size;
		}
		#region Methods
		public <#= @name #> Swap()
		{
			return new <#= @name #>(this.LeftTop.Swap(), this.Size.Swap());
		}
		public <#= @name #> Pad(<#= @value1 #> pad)
		{
			return this.Pad(pad, pad, pad, pad);
		}
		public <#= @name #> Pad(SizeValue padding)
		{
			return this.Pad(padding.Width, padding.Width, padding.Height, padding.Height);
		}
		public <#= @name #> Pad(<#= @value1 #> left, <#= @value1 #> right, <#= @value1 #> top, <#= @value1 #> bottom)
		{
			return new <#= @name #>(new PointValue(this.Left - left, this.Top - top), new SizeValue(this.Size.Width + left + right, this.Size.Height + top + bottom));
		}
		public <#= @name #> Intersection(<#= @name #> other)
		{
			<#= @value1 #> left = this.Left > other.Left ? this.Left : other.Left;
			<#= @value1 #> top = this.Top > other.Top ? this.Top : other.Top;
			<#= @value1 #> width = Kean.Math.<#= @namespace1 #>.Maximum((this.Right < other.Right ? this.Right : other.Right) - left, 0);
			<#= @value1 #> height = Kean.Math.<#= @namespace1 #>.Maximum((this.Bottom < other.Bottom ? this.Bottom : other.Bottom) - top, 0);
			return new <#= @name #>(left, top, width, height);
		}
		public <#= @name #> Union(<#= @name #> other)
		{
			<#= @value1 #> left = Kean.Math.<#= @namespace1 #>.Minimum(this.Left, other.Left);
			<#= @value1 #> top = Kean.Math.<#= @namespace1 #>.Minimum(this.Top, other.Top);
			<#= @value1 #> width = Kean.Math.<#= @namespace1 #>.Maximum(this.Right, other.Right) - Kean.Math.<#= @namespace1 #>.Minimum(this.Left, other.Left);
			<#= @value1 #> height = Kean.Math.<#= @namespace1 #>.Maximum(this.Bottom, other.Bottom) - Kean.Math.<#= @namespace1 #>.Minimum(this.Top, other.Top);
			return new <#= @name #>(left, top, width, height);
		}
        public bool Contains(Integer.PointValue point)
        {
            return this.Left <= point.X && point.X < this.Right && this.Top <= point.Y && point.Y < this.Bottom;
        }
        public bool Contains(Single.PointValue point)
        {
            return this.Left <= point.X && point.X < this.Right && this.Top <= point.Y && point.Y < this.Bottom;
        }
        public bool Contains(Double.PointValue point)
        {
            return this.Left <= point.X && point.X < this.Right && this.Top <= point.Y && point.Y < this.Bottom;
		}
		public bool Contains(<#= @name #> box)
		{
			return this.Intersection(box) == box;
		}
		public <#= @name #> Round()
		{
			return new <#= @name #>(this.LeftTop.Round(), this.Size.Round());
		}
		public <#= @name #> Ceiling()
		{
			PointValue leftTop = this.LeftTop.Floor();
			return new <#= @name #>(leftTop, (SizeValue)(this.RightBottom.Ceiling() - (Abstract.IVector<<#= @value1 #>>)leftTop));
		}
		public <#= @name #> Floor()
		{
			return new <#= @name #>(this.LeftTop.Round(), this.Size.Round());
		}
		#endregion
		#region Arithmetic operators
		public static <#= @name #> operator +(<#= @name #> left, <#= @name #> right)
		{
			<#= @name #> result;
			if (left.Empty)
				result = right;
			else if (right.Empty)
				result = left;
			else
				result = new <#= @name #>(Kean.Math.<#= @namespace1 #>.Minimum(left.Left, right.Left), Kean.Math.<#= @namespace1 #>.Minimum(left.Top, right.Top), Kean.Math.<#= @namespace1 #>.Maximum(left.Right, right.Right) - Kean.Math.<#= @namespace1 #>.Minimum(left.Left, right.Left), Kean.Math.<#= @namespace1 #>.Maximum(left.Bottom, right.Bottom) - Kean.Math.<#= @namespace1 #>.Minimum(left.Top, right.Top));
			return result;
		}
		public static <#= @name #> operator -(<#= @name #> left, <#= @name #> right)
		{
			<#= @name #> result;
			if (!left.Empty && !right.Empty)
			{
				<#= @value1 #> l = Kean.Math.<#= @namespace1 #>.Maximum(left.Left, right.Left);
				<#= @value1 #> r = Kean.Math.<#= @namespace1 #>.Minimum(left.Right, right.Right);
				<#= @value1 #> t = Kean.Math.<#= @namespace1 #>.Maximum(left.Top, right.Top);
				<#= @value1 #> b = Kean.Math.<#= @namespace1 #>.Minimum(left.Bottom, right.Bottom);
				if (l < r && t < b)
				{
					result = new <#= @name #>(l, t, r - l, b - t);
				}
				else
					result = new <#= @name #>();
			}
			else
				result = new <#= @name #>();
			return result;
		}
		public static <#= @name #> operator +(<#= @name #> left, PointValue right)
		{
			return new <#= @name #>(left.LeftTop + (Abstract.IVector<<#= @value1 #>>)right, left.Size);
		}
		public static <#= @name #> operator -(<#= @name #> left, PointValue right)
		{
			return new <#= @name #>(left.LeftTop - right, left.Size);
		}
		public static <#= @name #> operator +(<#= @name #> left, SizeValue right)
		{
			return new <#= @name #>(left.LeftTop, left.Size + right);
		}
		public static <#= @name #> operator -(<#= @name #> left, SizeValue right)
		{
			return new <#= @name #>(left.LeftTop, left.Size - right);
		}
		public static <#= @name #> operator *(TransformValue left, <#= @name #> right)
		{
			return new <#= @name #>(left * right.LeftTop, left * right.Size);
		}
		#endregion
        
		#region Comparison Operators
		/// <summary>
        /// Defines equality.
        /// </summary>
        /// <param name="Left">Point Left of operator.</param>
        /// <param name="Right">Point Right of operator.</param>
        /// <returns>True if <paramref name="Left"/> equals <paramref name="Right"/> else false.</returns>
        public static bool operator ==(<#= @name #> left, <#= @name #> right)
        {
            return left.Left == right.Left && left.Top == right.Top && left.Width == right.Width && left.Height == right.Height;
        }
        /// <summary>
        /// Defines inequality.
        /// </summary>
        /// <param name="Left">Point Left of operator.</param>
        /// <param name="Right">Point Right of operator.</param>
        /// <returns>False if <paramref name="Left"/> equals <paramref name="Right"/> else true.</returns>
        public static bool operator !=(<#= @name #> left, <#= @name #> right)
        {
            return !(left == right);
        }
        #endregion
        #region Static Operators
        public static <#= @name #> operator -(<#= @name #> left, ShellValue right)
        {
            return new <#= @name #>(left.LeftTop + right.LeftTop, left.Size - right.Size);
        }
        public static <#= @name #> operator +(<#= @name #> left, ShellValue right)
        {
            return new <#= @name #>(left.LeftTop - right.LeftTop, left.Size + right.Size);
        }
        #endregion
		#region Casts
<#+
    }  
#>

<#+
    void GenerateDouble(string @name)
    {
#>
     	public static implicit operator <#= @name #>(Single.<#= @name #> value)
        {
            return new <#= @name #>(value.LeftTop, value.Size);
        }
        public static implicit operator <#= @name #>(Integer.<#= @name #> value)
        {
            return new <#= @name #>(value.LeftTop, value.Size);
        }
        public static explicit operator Single.<#= @name #>(<#= @name #> value)
        {
            return new Single.<#= @name #>((Single.PointValue)(value.LeftTop), (Single.SizeValue)(value.Size));
        }
        public static explicit operator Integer.<#= @name #>(<#= @name #> value)
        {
            return new Integer.<#= @name #>((Integer.PointValue)(value.LeftTop), (Integer.SizeValue)(value.Size));
        }
<#+
    }  
#>
<#+
    void GenerateSingle(string @name)
    {
#>
		public static implicit operator <#= @name #>(Integer.<#= @name #> value)
        {
            return new <#= @name #>(value.LeftTop, value.Size);
        }
        public static explicit operator Integer.<#= @name #>(<#= @name #> value)
        {
            return new Integer.<#= @name #>((Integer.PointValue)(value.LeftTop), (Integer.SizeValue)(value.Size));
        }
<#+
    }  
#>
<#+
    void GenerateEnd(string @name, string @namespace, string @namespace1, string @value1)
    {
#>
		public static implicit operator string(<#= @name #> value)
        {
            return value.ToString();
        }
        public static implicit operator <#= @name #>(string value)
        {
            <#= @name #> result = new <#= @name #>();
            if (value.NotEmpty())
            {

                try
                {
                    string[] values = value.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                    if (values.Length == 4)
                        result = new <#= @name #>((PointValue)(values[0] + " " + values[1]), (SizeValue)(values[2] + " " + values[3]));
                }
                catch
                {
                }
            }
            return result;
        }
        #endregion
        #region Object Overrides
		public override bool Equals(object other)
		{
			return (other is <#= @name #>) && this.Equals((<#= @name #>)other);
		}
		public bool Equals(<#= @name #> other)
		{
			return this == other;
		}
		public override string ToString()
		{
            return this.LeftTop.ToString() + ", " + this.Size.ToString();
        }
		public override int GetHashCode()
        {
            return 33 * this.LeftTop.GetHashCode() ^ this.Size.GetHashCode();
        }
        #endregion
		#region Static Creators
		public static <#= @name #> Bounds(<#= @value1 #> left, <#= @value1 #> right, <#= @value1 #> top, <#= @value1 #> bottom)
		{
			return new <#= @name #>(left, top, right - left, bottom - top);
		}
		public static <#= @name #> Bounds(params PointValue[] points)
		{
			<#= @name #> result = new <#= @name #>();
			if (points.Length > 0)
			{
				<#= @value1 #> xMinimum = 0;
				<#= @value1 #> xMaximum = xMinimum;
				<#= @value1 #> yMinimum = xMinimum;
				<#= @value1 #> yMaximum = xMinimum;
				bool initilized = false;
				foreach (PointValue point in points)
				{
					
						if (!initilized)
						{
							initilized = true;
							xMinimum = point.X;
							xMaximum = point.X;
							yMinimum = point.Y;
							yMaximum = point.Y;
						}
						else
						{
							if (point.X < xMinimum)
								xMinimum = point.X;
							else if (point.X > xMaximum)
								xMaximum = point.X;
							if (point.Y < yMinimum)
								yMinimum = point.Y;
							else if (point.Y > yMaximum)
								yMaximum = point.Y;
						}
				}
				result = new <#= @name #>(xMinimum, yMinimum, xMaximum - xMinimum, yMaximum - yMinimum);
			}
			return result;
		}
		#endregion
	}
}
<#+
    }  
#>
